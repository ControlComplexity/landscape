// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.0
// source: api/landscape/v1/exhibition.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExhibitionClient is the client API for Exhibition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExhibitionClient interface {
	CreateExhibition(ctx context.Context, in *CreateExhibitionRequest, opts ...grpc.CallOption) (*CreateExhibitionReply, error)
	UpdateExhibition(ctx context.Context, in *UpdateExhibitionRequest, opts ...grpc.CallOption) (*UpdateExhibitionReply, error)
	DeleteExhibition(ctx context.Context, in *DeleteExhibitionRequest, opts ...grpc.CallOption) (*DeleteExhibitionReply, error)
	GetExhibition(ctx context.Context, in *GetExhibitionRequest, opts ...grpc.CallOption) (*GetExhibitionReply, error)
	ListExhibition(ctx context.Context, in *ListExhibitionRequest, opts ...grpc.CallOption) (*ListExhibitionReply, error)
}

type exhibitionClient struct {
	cc grpc.ClientConnInterface
}

func NewExhibitionClient(cc grpc.ClientConnInterface) ExhibitionClient {
	return &exhibitionClient{cc}
}

func (c *exhibitionClient) CreateExhibition(ctx context.Context, in *CreateExhibitionRequest, opts ...grpc.CallOption) (*CreateExhibitionReply, error) {
	out := new(CreateExhibitionReply)
	err := c.cc.Invoke(ctx, "/api.landscape.v1.Exhibition/CreateExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionClient) UpdateExhibition(ctx context.Context, in *UpdateExhibitionRequest, opts ...grpc.CallOption) (*UpdateExhibitionReply, error) {
	out := new(UpdateExhibitionReply)
	err := c.cc.Invoke(ctx, "/api.landscape.v1.Exhibition/UpdateExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionClient) DeleteExhibition(ctx context.Context, in *DeleteExhibitionRequest, opts ...grpc.CallOption) (*DeleteExhibitionReply, error) {
	out := new(DeleteExhibitionReply)
	err := c.cc.Invoke(ctx, "/api.landscape.v1.Exhibition/DeleteExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionClient) GetExhibition(ctx context.Context, in *GetExhibitionRequest, opts ...grpc.CallOption) (*GetExhibitionReply, error) {
	out := new(GetExhibitionReply)
	err := c.cc.Invoke(ctx, "/api.landscape.v1.Exhibition/GetExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionClient) ListExhibition(ctx context.Context, in *ListExhibitionRequest, opts ...grpc.CallOption) (*ListExhibitionReply, error) {
	out := new(ListExhibitionReply)
	err := c.cc.Invoke(ctx, "/api.landscape.v1.Exhibition/ListExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExhibitionServer is the server API for Exhibition service.
// All implementations must embed UnimplementedExhibitionServer
// for forward compatibility
type ExhibitionServer interface {
	CreateExhibition(context.Context, *CreateExhibitionRequest) (*CreateExhibitionReply, error)
	UpdateExhibition(context.Context, *UpdateExhibitionRequest) (*UpdateExhibitionReply, error)
	DeleteExhibition(context.Context, *DeleteExhibitionRequest) (*DeleteExhibitionReply, error)
	GetExhibition(context.Context, *GetExhibitionRequest) (*GetExhibitionReply, error)
	ListExhibition(context.Context, *ListExhibitionRequest) (*ListExhibitionReply, error)
	mustEmbedUnimplementedExhibitionServer()
}

// UnimplementedExhibitionServer must be embedded to have forward compatible implementations.
type UnimplementedExhibitionServer struct {
}

func (UnimplementedExhibitionServer) CreateExhibition(context.Context, *CreateExhibitionRequest) (*CreateExhibitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExhibition not implemented")
}
func (UnimplementedExhibitionServer) UpdateExhibition(context.Context, *UpdateExhibitionRequest) (*UpdateExhibitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExhibition not implemented")
}
func (UnimplementedExhibitionServer) DeleteExhibition(context.Context, *DeleteExhibitionRequest) (*DeleteExhibitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExhibition not implemented")
}
func (UnimplementedExhibitionServer) GetExhibition(context.Context, *GetExhibitionRequest) (*GetExhibitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExhibition not implemented")
}
func (UnimplementedExhibitionServer) ListExhibition(context.Context, *ListExhibitionRequest) (*ListExhibitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExhibition not implemented")
}
func (UnimplementedExhibitionServer) mustEmbedUnimplementedExhibitionServer() {}

// UnsafeExhibitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExhibitionServer will
// result in compilation errors.
type UnsafeExhibitionServer interface {
	mustEmbedUnimplementedExhibitionServer()
}

func RegisterExhibitionServer(s grpc.ServiceRegistrar, srv ExhibitionServer) {
	s.RegisterService(&Exhibition_ServiceDesc, srv)
}

func _Exhibition_CreateExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServer).CreateExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.landscape.v1.Exhibition/CreateExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServer).CreateExhibition(ctx, req.(*CreateExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exhibition_UpdateExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServer).UpdateExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.landscape.v1.Exhibition/UpdateExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServer).UpdateExhibition(ctx, req.(*UpdateExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exhibition_DeleteExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServer).DeleteExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.landscape.v1.Exhibition/DeleteExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServer).DeleteExhibition(ctx, req.(*DeleteExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exhibition_GetExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServer).GetExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.landscape.v1.Exhibition/GetExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServer).GetExhibition(ctx, req.(*GetExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exhibition_ListExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServer).ListExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.landscape.v1.Exhibition/ListExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServer).ListExhibition(ctx, req.(*ListExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exhibition_ServiceDesc is the grpc.ServiceDesc for Exhibition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exhibition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.landscape.v1.Exhibition",
	HandlerType: (*ExhibitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExhibition",
			Handler:    _Exhibition_CreateExhibition_Handler,
		},
		{
			MethodName: "UpdateExhibition",
			Handler:    _Exhibition_UpdateExhibition_Handler,
		},
		{
			MethodName: "DeleteExhibition",
			Handler:    _Exhibition_DeleteExhibition_Handler,
		},
		{
			MethodName: "GetExhibition",
			Handler:    _Exhibition_GetExhibition_Handler,
		},
		{
			MethodName: "ListExhibition",
			Handler:    _Exhibition_ListExhibition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/landscape/v1/exhibition.proto",
}
