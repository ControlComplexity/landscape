// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.9.0
// source: api/landscape/v1/landscape.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLandscapeServiceQueryCityImage = "/landscape.api.LandscapeService/QueryCityImage"
const OperationLandscapeServiceQueryCityList = "/landscape.api.LandscapeService/QueryCityList"
const OperationLandscapeServiceQueryEssayList = "/landscape.api.LandscapeService/QueryEssayList"
const OperationLandscapeServiceQueryOneEssay = "/landscape.api.LandscapeService/QueryOneEssay"
const OperationLandscapeServiceQueryRankList = "/landscape.api.LandscapeService/QueryRankList"
const OperationLandscapeServiceQueryRelatedEssayList = "/landscape.api.LandscapeService/QueryRelatedEssayList"
const OperationLandscapeServiceQuerySwiperImageList = "/landscape.api.LandscapeService/QuerySwiperImageList"

type LandscapeServiceHTTPServer interface {
	QueryCityImage(context.Context, *QueryCityImageReq) (*QueryCityImageResp, error)
	QueryCityList(context.Context, *QueryCityListReq) (*QueryCityListResp, error)
	QueryEssayList(context.Context, *QueryEssayListReq) (*QueryEssayListResp, error)
	QueryOneEssay(context.Context, *QueryOneEssayReq) (*QueryOneEssayResp, error)
	QueryRankList(context.Context, *QueryRankListReq) (*QueryRankListResp, error)
	QueryRelatedEssayList(context.Context, *QueryRelatedEssayListReq) (*QueryRelatedEssayListResp, error)
	QuerySwiperImageList(context.Context, *QuerySwiperImageListReq) (*QuerySwiperImageListResp, error)
}

func RegisterLandscapeServiceHTTPServer(s *http.Server, srv LandscapeServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/query/essay_list", _LandscapeService_QueryEssayList0_HTTP_Handler(srv))
	r.GET("/v1/query/related_essay_list/{uuid}", _LandscapeService_QueryRelatedEssayList0_HTTP_Handler(srv))
	r.GET("/v1/query/one_essay/{uuid}", _LandscapeService_QueryOneEssay0_HTTP_Handler(srv))
	r.GET("/v1/query/city_list", _LandscapeService_QueryCityList0_HTTP_Handler(srv))
	r.GET("/v1/query/swiper_image_list", _LandscapeService_QuerySwiperImageList0_HTTP_Handler(srv))
	r.GET("/v1/query/rank_list", _LandscapeService_QueryRankList0_HTTP_Handler(srv))
	r.GET("/v1/query/city_image/{city}", _LandscapeService_QueryCityImage0_HTTP_Handler(srv))
}

func _LandscapeService_QueryEssayList0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryEssayListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryEssayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryEssayList(ctx, req.(*QueryEssayListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryEssayListResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QueryRelatedEssayList0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryRelatedEssayListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryRelatedEssayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryRelatedEssayList(ctx, req.(*QueryRelatedEssayListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryRelatedEssayListResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QueryOneEssay0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryOneEssayReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryOneEssay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryOneEssay(ctx, req.(*QueryOneEssayReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryOneEssayResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QueryCityList0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryCityListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryCityList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryCityList(ctx, req.(*QueryCityListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryCityListResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QuerySwiperImageList0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuerySwiperImageListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQuerySwiperImageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QuerySwiperImageList(ctx, req.(*QuerySwiperImageListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuerySwiperImageListResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QueryRankList0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryRankListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryRankList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryRankList(ctx, req.(*QueryRankListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryRankListResp)
		return ctx.Result(200, reply)
	}
}

func _LandscapeService_QueryCityImage0_HTTP_Handler(srv LandscapeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryCityImageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLandscapeServiceQueryCityImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryCityImage(ctx, req.(*QueryCityImageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryCityImageResp)
		return ctx.Result(200, reply)
	}
}

type LandscapeServiceHTTPClient interface {
	QueryCityImage(ctx context.Context, req *QueryCityImageReq, opts ...http.CallOption) (rsp *QueryCityImageResp, err error)
	QueryCityList(ctx context.Context, req *QueryCityListReq, opts ...http.CallOption) (rsp *QueryCityListResp, err error)
	QueryEssayList(ctx context.Context, req *QueryEssayListReq, opts ...http.CallOption) (rsp *QueryEssayListResp, err error)
	QueryOneEssay(ctx context.Context, req *QueryOneEssayReq, opts ...http.CallOption) (rsp *QueryOneEssayResp, err error)
	QueryRankList(ctx context.Context, req *QueryRankListReq, opts ...http.CallOption) (rsp *QueryRankListResp, err error)
	QueryRelatedEssayList(ctx context.Context, req *QueryRelatedEssayListReq, opts ...http.CallOption) (rsp *QueryRelatedEssayListResp, err error)
	QuerySwiperImageList(ctx context.Context, req *QuerySwiperImageListReq, opts ...http.CallOption) (rsp *QuerySwiperImageListResp, err error)
}

type LandscapeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLandscapeServiceHTTPClient(client *http.Client) LandscapeServiceHTTPClient {
	return &LandscapeServiceHTTPClientImpl{client}
}

func (c *LandscapeServiceHTTPClientImpl) QueryCityImage(ctx context.Context, in *QueryCityImageReq, opts ...http.CallOption) (*QueryCityImageResp, error) {
	var out QueryCityImageResp
	pattern := "/v1/query/city_image/{city}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryCityImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QueryCityList(ctx context.Context, in *QueryCityListReq, opts ...http.CallOption) (*QueryCityListResp, error) {
	var out QueryCityListResp
	pattern := "/v1/query/city_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryCityList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QueryEssayList(ctx context.Context, in *QueryEssayListReq, opts ...http.CallOption) (*QueryEssayListResp, error) {
	var out QueryEssayListResp
	pattern := "/v1/query/essay_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryEssayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QueryOneEssay(ctx context.Context, in *QueryOneEssayReq, opts ...http.CallOption) (*QueryOneEssayResp, error) {
	var out QueryOneEssayResp
	pattern := "/v1/query/one_essay/{uuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryOneEssay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QueryRankList(ctx context.Context, in *QueryRankListReq, opts ...http.CallOption) (*QueryRankListResp, error) {
	var out QueryRankListResp
	pattern := "/v1/query/rank_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryRankList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QueryRelatedEssayList(ctx context.Context, in *QueryRelatedEssayListReq, opts ...http.CallOption) (*QueryRelatedEssayListResp, error) {
	var out QueryRelatedEssayListResp
	pattern := "/v1/query/related_essay_list/{uuid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQueryRelatedEssayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LandscapeServiceHTTPClientImpl) QuerySwiperImageList(ctx context.Context, in *QuerySwiperImageListReq, opts ...http.CallOption) (*QuerySwiperImageListResp, error) {
	var out QuerySwiperImageListResp
	pattern := "/v1/query/swiper_image_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLandscapeServiceQuerySwiperImageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
